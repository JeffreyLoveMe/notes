//
//  WMThreadViewController.h
//  WMGameProxy
//
//  Created by 谢吴军 on 2020/3/16.
//  Copyright © 2020 zali. All rights reserved.
//

#import <UIKit/UIKit.h>

NS_ASSUME_NONNULL_BEGIN
/**
 1.进程和线程的概念
 1>.进程 - 在系统中正在运行的一个应用程序/有状态（一个未运行的应用程序不是进程）/相互独立/一个应用程序可以对应多个进程/一个进程可以有多个线程（至少有一个线程/同一个进程内的线程共享进程的资源）/进程是CPU资源分配的基本单位/CPU给进程分配资源/进程类似于车间
 2>.线程 - 进程中所有的任务都是在线程中执行的/进程需要执行任务起码需要一个线程/线程是CPU调度（执行任务）的最小单位/线程类似于工人
 */
/**
 2.串行和并行的概念
 1>.串行 - 线程执行任务只能一个一个的按照顺序执行我们称为"线程的串行"/一个线程只能执行一个任务
 2>.并行 - xxx
 */
/**
 3.多线程
 1>.一个进程中可以开启多条线程，每条线程之间可以并行（同时）执行不同的任务（一条线程内部是串行执行任务）
 2>.作用 - 为了使界面流畅，防止界面假死/网络请求、SDWebImage图片下载 1>.可以适当提高程序的执行效率/2>.可以释放提高资源利用率（CPU、内存利用率）/3>.创建线程需要花费时间和内存（大量开启线程会降低程序的性能）/4>.开启线程越多 CPU 调度上的开销越大/5>.多条线程同时访问同一块数据会出现资源抢占问题
 3>.原理 - 同一时间 CPU 只能处理一条线程（只有一条线程在工作）/多线程并发执行其实就是 CPU 快速在多条线程之间调度切换/相对于 “单CPU” 而言，如果是 “多核” 就可以实现真正意义的多线程
 4>.如果线程开启的特别多 - CPU会在N条线程之间调度，消耗大量的CPU资源/一般开启3-5条线程
 */
/**
 4.主线程/不可以手动开启
 1>.程序运行后会默认开启一条线程，我们称为主线程/UI线程
 2>.作用 - 显示/刷新UI界面｜处理UI事件（点击事件/滚动事件/拖拽事件）
 3>.注意 - 不要将耗时操作放在主线程中（线程内部是串行执行任务的）
 */
/**
 5.子线程/可以手动开启
 1>.我们称为子线程/后台线程/非主线程
 2>.
 */
@interface WMThreadViewController : UIViewController

@end

NS_ASSUME_NONNULL_END
