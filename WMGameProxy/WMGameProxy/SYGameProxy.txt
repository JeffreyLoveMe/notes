/**
名称：iOS面试题
作者：谢吴军
*/
Objective-C语言/Swift语言->iOS业务逻辑->iOS底层原理->网络协议->数据结构->算法->跨平台
/**************************计算机基础**************************/
//什么是变量的作用域和生命周期？局部变量和全局变量的区别？
1.作用域：变量在程序中使用范围；
2.生命周期：变量在时间上的有效范围；
3.局部变量：定义在函数内部的变量，在函数内部有效，生命周期从变量定义开始到函数结束；
4.全局变量：定义在所有函数外部的变量，在整个文件内有效，生命周期从变量定义开始到程序结束；
1).局部变量：定义在函数内部、代码块和形参列表中的变量；必须init
作用域：存储在栈中，在函数内部有效；
生命周期：从变量定义开始，到函数结束；
存储位置：局部变量存储在栈中，当作用域结束系统会自动释放栈中的局部变量；
2).全局变量：定义在所有函数外部的变量，只能通过对象来访问；不能定义的同时init、默认为0
作用域：存储在静态区，在整个文件内有效；
生命周期：从变量定义开始，到程序结束；
存储位置：全局变量存储在静态区中，随着程序的启动而创建，随着程序的结束而结束；
// 继承和组合的区别？
1.继承：当两个类拥有相同的属性和方法可以将相同的属性和方法抽取（###是xxx）
2.组合：让某个类做为另一个类的属性（###拥有xxx）
//http/https有什么区别？socket/http数据交互有什么区别？
1.
2.
3.
//json解析和XML解析的区别？
1.
2.
3.
//值传递和引用传递的区别？
1.
2.
3.
//常见的七种数据结构
1.冒泡排序、2.选择排序、3.插入排序、4.希尔排序、5.快速排序、6.归并排序、7.堆排序
/**************************Objective-C基础**************************/
//#include和#import的区别？@class呢？
1.#include/#import将xxx.h复制到当前文件中，#import不会重复copy、#include会重复copy
2.@class仅仅是告诉编译器xxx是一个类，至于这个类如何定义的，有什么属性和方法当前类不知道（无法使用）；可以
解决#import引起的相互导入问题
3.@class一般用于.h文件（除了继承关系）/#import一般用于.m文件
//self.name和_name的区别?
1.self.name是对set/get方法的简单操作：引用计数 + 1
2._name是直接操作变量：引用计数不变
//runloop常驻线程NSURLConnection：为什么AF2.0使用常驻线程？AF3.0就抛弃了？
1.
2.
//保证多线程数据安全又什么办法？
1.加锁：
2.再写一个？？？
//怎么获取app的全量日志（如何实现一套和业务解耦的日志系统）
1.
2.
//App启动优化：有哪些建议？了解过dyld吗？
1.
2.
3.
//符号是怎么绑定在地址上的？能写一个hotReload框架吗？
1.
2.
//iOS崩溃是什么导致的？如何监控不同类型的崩溃？
1.
2.
//如何获取详细的内存分配信息：比如不同线程的堆栈调用？
1.
2.
//iOS有哪些UI开发框架？
1.Cocoa
2.再写一个？？？
//Apple为什么设计元类？
1.
2.
//extern和static的区别？
1.extern的作用：
1).修饰全局变量：表示声明一个全局变量，仅仅是告诉系统我们有这个全局变量，不开辟内存空间；
2).修饰函数：表示声明/定义一个外部函数（可以被其他文件访问的函数）；
2.static的作用：
1).修饰局部变量：当执行到定义局部变量的代码就会分配存储空间，但只有程序结束才会释放该存储空间；
2).修饰全局变量：表示定义一个内部全局变量，只能被当前文件访问，开辟内存空间；
3).修饰函数：表示定义一个内部函数（只能被当前文件访问的函数）；
// block为什么会导致循环引用？举例子说明。
1.
2.
3.
/**************************UI基础**************************/
/**************************swift基础**************************/
/**************************项目部分**************************/
/**************************手写代码**************************/
// 冒泡排序：将相邻元素两两排序让较大的数沉底、一共需要(N-1)轮排序
3 5 8 6 2  // 原始数据
3 5 6 2 8  // 第一轮排序
3 5 2 6 8  // 第二轮排序
3 2 5 6 8  // 第三轮排序
2 3 5 6 8  // 第四轮排序
#include <stdio.h>
int main() {
    int arr[5] = {3,5,8,6,2};
    int temp;
    //外层循环控制轮数
    for(int i = 0;i < 4;i++) {
        for(int j = 0;j < 4-i;j++) {
            if(arr[j] > arr[j+1]) {
                temp = arr[j+1];
                arr[j+1] = arr[j];
                arr[j] = temp;
            }
        }
        for(int k = 0;k < 5;k++) {
            printf("%d ",arr[k]);
        }
        printf("\n");
    }
    return 0;
}
// 选择排序：从下标0开始，依次作为待比较的元素，从待比较的元素开始向后遍历数组找到最小的
元素与待比较的元素交换，一共需要(N-1)轮排序
4 8 7 2 6  // 原始数据
2 8 7 4 6  // 第一轮排序
2 4 7 8 6  // 第二轮排序
2 4 6 8 7  // 第三轮排序
2 4 6 7 8  // 第四轮排序
#include <stdio.h>
int main() {
    int arr[5]={4,8,7,2,6};
    int max;
    int pos;
    //外层循环控制排序轮数
    for(int i=0;i<4;i++) {
        max = arr[i];
        pos = i;
        //里层循环控制选择一个值最大的元素
        for(int j=i;j<5;j++) {
            if(max < arr[j]) {
                max = arr[j];
                pos = j;
            }
        }
        //用值最大的元素与待比较元素进行交换
        arr[pos] = arr[i];
        arr[i] = max;
    }
    printf("%d\n",arr[1]*arr[2]);
    return 0;
}
// 快速排序
// 堆排序
// 二分查找
/**************************项目优化**************************/
// 平时工作中遇到过哪些内存crash/泄漏的情况
1.
2.
3.
4.
// 包体大小优化
1.图片格式的存储算法
2.图片格式的识别算法
3.源码格式的二进制内容
4.CocoaPods打包方式
// 组件化
1.全量组件化：划分相关的层级（业务组件按照粒子划分），通过“路由中间件”进行解耦调用
2.
3.
4.
// 热修复
// 动态化
// 大前端flutter：https://book.flutterchina.club
/**************************补充部分**************************/
// 戴铭
https://github.com/ming1016
https://ming1016.github.io/categories/Programming
/**************************计算机常用单词**************************/
// A
Activity活动/Action动作/Animations动画/Audio音频/AutoLogin自动登录/Analysis分析
Alert警告
// B
Bean/Domain/Model/Item实体类/Button按钮/Bluetooth蓝牙/Back返回
// C
Code代码/Content内容/Common公共的/CheckBox复选框/Component组件/Category类别/Chart图表
Comment评论/Calendar日历/Custom自定义/Cache缓存/Coupon优惠券
// D
Dialog对话框/Demo样品/演示/Debug调试
// E
End/Finish结束/Engine发动机/Embedded嵌入/Exit退出
// F
Fail失败/Flag标志/Footer页脚/Framework框架/Focus关注/Follow跟随
// G
Game游戏/Gesture手势
// H
Header头部/HotFix热修复
// I
Init初始化/Image图像/Icon图标、头像/Intent意图/Item单项/Index索引
// J
// K
KeyWord关键字/KeyBoard键盘
// L
Libs库/Login登录/Logout登出/Loading加载/Layout布局/Link链接/Least最少的/Log输出/Loop循环
// M
Mobile手机/MVC/MVVM/MVP架构/Material材料/Menu菜单/MapView地图视图/Media媒体
// N
NetWork网络/Notification通知
// O
Other其他的
// P
Pay支付/PassWord密码/PlugIn插件/Proxy代理/Page页面/Press按压/Permission许可/Performance性能
// Q
QRCoder二维码
// R
Result结果/Router路由/Report举报
// S
Start开始/Source资源/Splash闪屏/Success成功/Super父类/SortByXxx按xxx排序/Summary总结
Security安全性/Storage存储/Space空间/ScreenShot截图/Should应该/Search搜索/Score分数/
Statistic/Stat统计
// T
Table表格/Tag标签/Test测试/Time时间/Task任务/Toast提示框/Tool工具/Temp/Tmp临时/Theme主题
// U
Update更新/UserName用户名/Utils工具
// V
Video视频/View视图
// W
WebView网络视图/WebSite网站/WidGet小装置/Wear穿戴
// X
// Y
// Z
