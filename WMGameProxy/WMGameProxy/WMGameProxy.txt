/**
名称：笔记
作者：谢吴军
*/
/**************************计算机基础**************************/
//开班须知
//iOS开发
//Mac快捷键
//XCode快捷键
//常用终端命令
//vi编译器
//计算机常识
//进制转换
//原码/补码/反码
/**************************C语言基础**************************/
//C语言概述
//main函数
//C语言的执行流程
//关键字
//标识符
//注释
//数据类型
//常量
//变量
//printf()函数
//scanf()函数
//运算符
//条件语句
//循环语句
//一维数组
//二维数组
//冒泡排序x
//选择排序x
//快速排序x
//堆排序x
//二分查找x
//函数
//局部变量/全局变量
//内存管理
//字符串
//指针x
//结构体x
//枚举x
//共用体x
//预处理指令
/**************************Objective-C基础**************************/





//认识Objective-C语言
1.概述：面向对象(oop)的C语言/完全兼容C语言/C语言代码可以直接编译在Objective-C工程中；
2.源文件：.h/.m/.mm；
3.关键字：C语言关键字在oc中都可以使用/新增部分关键字：@interface、@public、@implementation等；
4.数据类型：BOOL/SEL/null
5.#include -可能会出现重复包含头文件/#import -可以避免重复包含头文件
6.C语言：int <==> OC语言：NSInteger <==> swift语言：Int

//面向对象OOP
1.概念：
1>.OOP是把问题里拥有相同属性的东西建立一个类
2.特性：
1>.封装：利用类将数据和基于数据的操作封装在一起，数据被保护在类的内部，系统的其它部分只有通过
被授权的操作才可以访问数据；将不需要对外提供的内容隐藏起来：把属性隐藏起来，提供公共方法对外访问；
2>.继承/派生：1.继承：父类的属性（成员变量：不包括私有）和方法（对象方法 & 类方法），子类可以直接获取；2.派生：子类保持父类中的行为和属性，新增其它功能（对象方法 & 类方法可以重写、属性不能重写）；3.提示：每个类都有一个[super class]指针指向自己父类（OC只支持单继承）；4.好处：1).创建大量类抽取重复代码；2).建立类与类之间的关系；3).耦合性（依赖性）太强；
3>.多态：程序中可以有同名的不同方法共存，利用子类对父类方法的覆盖和重载在同一个类中定义多个同名的方法来实现；
3.面向对象编程/面向过程编程的区别：
1>.面向对象编程是把问题中拥有相同属性的东西建立一个类，然后创建类的对象；
2>.面向对象编程注重生活逻辑、面向过程编程注重数学逻辑；

//主头文件
1.主头文件 - copy该工具箱中所有工具的头文件的文件
2.避免每次使用都需要导入一众对应的头文件
3.主头文件的名称都和工具箱的名称相同

//类class：属性 + 行为（谁最清楚这个行为，那么行为就属于谁）
1.定义：具有相同和相似性质对象的抽象就是类；对象的抽象就是类，类的具体化就是对象（堆内存）；
2.类 = 结构体(存储数据) + 函数(管理数据)；！！！swift中结构体作用很大！！！
3.实质：类的实质是一个对象，该对象会在这个类第一次被使用的时候创建；

//类方法
1.概念：C++中的静态方法/不属于任何一个对象/通过类名调用，不需要创建对象/不能直接调用对象方法和成员变量
2.对一个功能模块留下简单的对外接口：+(void)addNum:(NSInteger)newNum;
3.类方法的执行效率比对象方法高：对象方法可以访问成员变量/类方法中不可以直接访问成员变量；

//单例模式

//构造方法
1.定义：OC中称所有init开头的方法为构造方法/只能被调用一次
2.作用：初始化对象/初始化对象的成员变量
3.-(instancetype)init {
    /// 保留父类初始化操作：调用父类方法
    // 如果调用对象方法：super就是指向父类对象的指针
    // 如果调用类方法：super就是指向父类的指针
    self = [super init];  // 1.初始化父类
    /// 重写构造方法
    // 子类方法会覆盖父类方法
    if (self) {   // 2.判断父类是否初始化成功
        // 只有父类初始化成功才可以初始化子类
        // 初始化对象的成员变量
        // 除了这里其他地方都是固定方法
        _name = "10";  // 3.初始化子类
        _age = 12;
    }
    return self;  // 4.返回当前对象地址
}
4.-(instancetype)initWithName:(NSString *)name withAge:(NSInteger)age {
    self = [super initWithName:name withAge:age]; // 调用父类
    // 自定义构造方法
}
特点：一个类中可以自定义零到多个构造方法；构造方法可以有一个到多个参数

//多态：同一个接口不同的实现、父类指针指向子类对象
1.重写：重新实现子类方法（子类最终执行重写以后得方法）
2.重载：在同一个类定义多个同名方法（每个方法具有不同参数类型和个数）
注意：！！！Objective-C语言没有严格的方法重载！！！
3.实现条件：1).继承关系；2).重写；3).父类指针指向子类对象
4.应用场景：可以减少代码量、避免调用子类特有方法需要强制类型转换

//权限修饰：见WMController.swift/WMGameProxy.h/m
//字符串、数组、字典（FoundationNSObject.h/m）

//Category类别
// 1.作用
1.一旦使用类别给已有的类增补方法，那么这个类的对象就可以使用该方法；
2.不修改原有类的基础上给已有的类/系统原生类增加方法：组件化基础；
3.可以对类的方法进行分类管理：将类的实现分散到多个不同的文件和框架中；
// 2.注意
1.类别中不能添加成员变量；
2.使用类别必须导入类别头文件；
3.父类类别中的方法子类也可以使用；
// 3.类扩展/匿名类别：当定义不想对外公开一些类的方法和属性时可以使用类扩展
@interface SyPerson()
// 可以声明私有成员变量
@property (weak, nonatomic) UIImageView *iconImageView;
// 可以声明私有方法：声明和实现都在 “.m文件” 中
-(void)song;
@end

//点语法和属性
1.概念：属性可以在不使用[对象指针 方法名称]的情况下使用点语法
//只是访问setter/getter方法/不是使用成员变量
xiaoMing.name = @"小明"; <==> [xiaoMing setName:@"小明"];
NSString *name = xiaoMing.name; <==> NSString *name = [xiaoMing getName];
2.点语法是一个编译器特征：在程序翻译成二进制的时候自动转换成getter/setter方法

//设计模式（23种设计模式）
1.概念：描述软件开发过程中若干重复出现的问题的解决方案
2.目的：提高程序的可扩展性和维护性

//异常处理
NSArray *array = [NSArray array];
@try {
    // 可能会出现异常的代码
    [array objectAtIndex:5];
} @catch (NSException *exception) {
    // 如果捕捉到错误：执行此处的代码
    NSLog(@"%@", exception);
} @finally {
    // 可选：必执行代码
    NSLog(@"finally");
}

//多态和虚方法
//类的消息机制
//“抽象工厂”模式
//协议和代理（代理实现回调）
//内存管理（数组的内存管理/继承和派生在内存中的体现）
//MRC/ARC（混合编程）
//选择器
//文件操作
//block（block实现回调）
//RunLoop
//Runtime
//KVC、KVO
/**************************UI基础**************************/
//认识UI(User Interface)
1.概述：用户通过UI与App进行交互/传入用户的请求/反馈运行的结果
2.坐标系：坐标系(0,0)在左上角，x轴向右x正向延伸、y轴向下正向延伸

//Apple设备（尺寸、分辨率、坐标）
//iOS的坐标体系
//Main()函数
//UIWindow
//ViewController的生命周期
//NSTimer定时器
//UIView/动画
//UILabel
//UIButton
//UIImageView
//UIApplication
//AppDelegate
//UITextFIeld
//UINavigation
//UIPageController
//UINavigationController
//TabBarController
//UIViewController
//Gif动画
//传值
//手势
//菜单
//UIScrollView
//UIPageControl
//UICollectionView
//iOS动画

//停靠模式Autoresize
1.概念：控制父视图改变大小时，子视图的变化方式；服务于父视图边界修改后，子视图的重新布局
2.作用：等比例缩放、横竖屏旋转
@property (strong,nonatomic) UIViewAutoresizing autoresizingMask;
UIViewAutoresizingNone      = 0  //NO
UIViewAutoresizingFlexibleLeftMargin   = 1 << 0  //右边界和父视图的距离不变，左边界自由
UIViewAutoresizingFlexibleWidth    = 1 << 1  //自由的宽度：左右边距与父视图保持不变
UIViewAutoresizingFlexibleRightMargin  = 1 << 2  //左边界和父视图的距离不变，右边界自由
UIViewAutoresizingFlexibleTopMargin   = 1 << 3  //下边界和父视图的距离不变，上边界自由
UIViewAutoresizingFlexibleHeight    = 1 << 4  //自由的高度，上下边距保持不变
UIViewAutoresizingFlexibleBottomMargin  = 1 << 5  //上边界和父视图的距离不变，下边界自由
3.在xib中怎么使用autoresizingMask：外部4根线固定边距、内部2根线固定宽高和父视图的比例

//UITableView
0.熟悉 UITableView 的常用属性
1.熟悉 UITableViewDataSource/UITableViewDelegate 的所有代理方法
2.熟悉 cell的复用机制
3.熟悉 UITableView 的编辑/多选/折叠

//UIPasteboard

//自动布局
1.autosizing：设置视图和父视图的尺寸关系/iOS6.x以前

//Xib/Interface Builder
1.IBAction和IBOutlet的区别？？？
IBAction用于方法/IBOutlet用于属性
/**************************网络基础**************************/
// 网络概述
1.基础概念：
Client客户端 - 移动应用/ iOS、Android应用
Server服务端 - 为客户端提供服务、数据和资源
Request请求 - 客户端向服务端索取数据的一种行为
Response响应 - 服务端对客户端请求的反应
URL - 统一资源定位符(网址)/协议+主机ip地址+端口号+资源/使用利于记忆的符号来代替IP地址
HTTP协议 - 超文本传输协议/规定客户端和服务端之间的数据传输格式/交互方法GET/POST/PUT/DELETE
2.数据下载：
同步下载：使用主线程进行下载，在下载完成前，线程阻塞
异步下载：开辟新线程负责下载，主线程不会卡死，当子线程完成，回调主线程

// json解析
// xml解析
// xPath
// socket通信
// NSURLSession原生网络请求
/**************************项目实战**************************/
//数据持久化
1.plist
2.
3.

//通信
1.
2.
3.

//真机调试
1.bundle ID：一般是“反向域名+产品名称”cn.com.donew.easy/不支持中文
2.
3.
4.

//适配
1.系统适配：
2.机型适配：
3.控件适配：

//多语言
常见语言： en/tw/hk/cn
定义：根据用户设置的Language and Region Format（语言和区域格式）修改应用本地化信息(语言、货币、日期格式等)；
http://www.cocoachina.com/ios/20170122/18609.html
https://www.jianshu.com/p/c7a6408410aa

//启动图-https://www.jianshu.com/p/a0f53f66ccbe/Launch Screen File > Launch Images Source/一般不设置“Launch Screen File”
//多线程
//用户通知
//LBS
//多媒体（图片/音频/视频/直播）
//分享
//三方登录
//多语言
//支付
//断点续传
//IM
//“原生” 与 “js交互”
//Objective-C和Swift混合编程
//二维码
//图文混排
//传感器
//AR
//近景通讯技术（蓝牙）
//iPad开发
//svn/git/CocoaPods
//应用发布（打包测试 / TestFlight /企业包 / AppStore）
//组件化（静态库）
//Cocoapods
//通知中心
//Auto Layout
//地图
//消息推送/本地推送
//即时通讯

///常见系统库
//1.基础框架
NSObject-基类（考虑分析源码）
Foundation-提供OC的基础类
UIKit-创建和管理App的UI
//2.核心框架
QuartzCore-提供动画特效以及通过硬件进行渲染能力/画图相关库
CoreGraphics-提供2D绘制的基于C的API/画图相关库
SystemConfiguration-检测当前网络是否可用和硬件设备状态
CFNetwork-访问和配置网络
CoreFoundation-提供抽象的常用数据类型
GameKit-为游戏提供网络功能：点对点互联和游戏中的语音交流
AddressBook-提供访问用户联系人信息的功能
AddressBookUI-提供用户界面：显示存储在地址簿中的联系人信息
AudioToolBox-提供音频录制和回放的底层API，同时负责管理音频硬件
AudioUnit-提供一个接口，让App可以对音频进行处理
//3.地图框架
MapKit-为App提供内嵌地图的接口
CoreLocation-使用GPS和WI-FI获取位置信息
//4.音视频框架
AVFoundation-提供音频录制和回放的c底层API，同时负责管理音频硬件
MediaPlayer-提供播放视频和音频的功能
MessageUI-提供视图控制接口用以处理E-mail和短信
OpenGLES-提供动画特效以及通过硬件进行渲染的能力
StoreKit-为App提供在程序运行中消费的支持
Security.framework -xxx
libsqlite3.tbd -xxx
libsqlite3.0.tbd -xxx

//常见三方libs
1>.需要分析理解源码
AFNetworking-网络请求下载相关库
Masonry/SnapKit-用于屏幕适配
FMDB-操作数据库相关库
MagicRecord-用于简化CoreData
SVPullToRefresh-上拉加载/下拉刷新控件
JSONKit-xxx
JSONModel/MJExtention-字典转模型
MJReFresh-上拉刷新/下拉加载
SDWebImage-图片下载/上传
2>.需要知道怎么使用
JXSegmentedView-多控制器滑动视图
MBProgressHUD-加载loading
SAMKeychain-keyChain保存
Reachability-用于检测网络类型
CSStickyHeaderFlowLayout-实现头部悬停
FLAnimatedImage-让GIF播放不卡
FXBlurView-实现高斯模糊
SSToolkit - 实现各种 “UI效果”
GPUImage - 图像处理库
SocketRocket - xxx
HockeyKit - adHoc自动更新框架
CSStickyHeaderFlowLayout - 实现 UICollectionView 头部悬停
https://blog.csdn.net/liuzhihui666/article/details/70152940
https://blog.csdn.net/MinggeQingchun/article/details/77160892

// 开发App
1.
2.
3.
/**************************swift基础**************************/
//怎么导入框架
//swift简介
//定义标识符
//swift语句结束
//常量和变量
//类型推导
//swift中基本运算
//逻辑分支
//循环
//字符串
//数组
//字典
//元组
//可选类型
/**************************实用技术(swift版本)**************************/
/**************************补充部分**************************/
//知识点：
https://www.cnblogs.com/W-Kr/p/5248316.html  //解析html
http://modelend.com  //在线json转模型
https://mp.weixin.qq.com/s/ynkun7E1niuXfnnNBRap8Q  //iOS13

//工具网站：
https://soft.macx.cn
https://xclient.info
https://www.macbed.com
http://down.applex.net/macosx/software.html

//抓包：
1.工具：Charles
2.作用：抓包可以很快定位问题
3.步骤|注意事项：
1).下载安装抓包工具Charles
2).将mac的网络分享出去|手动配置端口、ip
3).如果需要抓取https、需要安装证书
4.衍生的面试题：
1).你平时在工作中使用过抓包工具吗？一般是用来干嘛的？
2).抓包的步骤是怎么样的？通过步骤你能猜测一下抓包的工作原理吗？
3).抓包可以抓https吗？怎么才可以让https不被抓包工具抓取？

// iOS13、ipadOS、MacOS
1.
2.
3.

// 开发工具的使用
1.VSCode的使用：https://code.visualstudio.com/docs

// Xcode编译原理
1.XCode4.0以前使用GCC编译器：
2.XCode4.0以后使用LLVM(Clang前端专门用来编译代码)：

// LLVM项目
// Clang编译器
// Instruments
// RxSwift
// ReactiveCocoa
// Scrumj敏捷开发

// 著名网站
stackoverflow - IT问答网站/可以找到90%以上的答案
https://www.jianshu.com/p/e37914c4d3d9 - iOS大佬博客
http://github.com/lintaoSuper/trip-to-iOS - gitHub

//名词术语
WWDC - 全球开发者大会
UUID - 设备唯一标识（ https://www.jianshu.com/p/0dce89cdf9f6 ）
UDID - 设备识别码（真机调试 / App上架）
HealthKit - xxx
HomeKit - xxx
iBeacons - xxx
SpriteKit - xxx
SceneKit - xxx
邓白氏 - xxx
僵尸对象 - 被释放的对象/开启监听"僵尸对象"( Edit Scheme->Run->Diagnostics->勾选Zombie Objects )
野指针 - 指向僵尸对象的指针
nil空指针 - 为了避免给野指针发送消息报错，当一个对象被释放以后我们会将这个对象的指针设置为空指针

//知识点速查：
Res - 资源文件/常见问题截图
Libs - 常见第三方库
WMGameProxy.txt - 常见知识点
DNGameProxy.txt - 项目管理
WMGame.swift - swift基础知识
WMController.swift - swiftUI知识
AppDelegate.h/m - 常见系统问题查询
SceneDelegate.h/m - iOS13新特性
SyGameProxy.h/c - C语言基础知识
WMGameProxy.h/m - OC基础知识
SyMemoryManager.h/m - 内存管理
WMThreadViewController.h/m - 多线程
WMGameView.h/m - OC自定义控件
FoundationNSObject.h/m - Foundation常见类
ComponentController.h/m - UI组件库
SyTableViewController.h/m - UITableView详解
SyCollectionViewController.h/m - UICollectionViewController详解
SyCustomFlowLayout - 自定义"流式布局"
SyCustomCell.h/m - 自定义 Cell
SyPostItem.h/m - 自定义 Model
WMWebViewController.h/m - js和原生交互详解
SySkillController.h/m - 技能事例
MainController.h/m - 事例代码
NSString+Extension.h/m - 类目
WMGameProxy.pch - 预编译
WMGameProxy-Bridging-Header.h - 桥接文件
