// 项目类
1.项目的技术要点/功能模块实现/项目中的难点有哪些，怎么解决的/项目中有哪些你不满意的地方/如果现在让你做，你可以怎么做？/做过最得意的是什么项目/
2.关于版本控制系统：一般可以讲svn/git就行/优缺点/怎么使用/具体命令行又什么区别和作用？
3.你通常用什么数据格式与服务端交互：json/xml
4.掌握的其他编程语言：Java/js/h5/css
5.常见的第三方库：起码写5种/写出来的就是最重要、常见/需要涉及到UI、网络、动画、缓存等每个方面/一定要知道源码
6.iOS的设计模式：MVC/MVVM必须要搞透
7.代码复用、封装、重构、敏捷开发、快速迭代、codeReview
8.如何让imageNamed同时兼容3.x/4.x系统/以及不去缓存
9.如何实现从外部打开App
10.有没有写过自定义控件
11.怎么把敏感字段变成**

// 上古时代面试题：iOS6.0
1.定义属性：什么时候使用copy/什么时候使用assign、retain ///为什么要使用定义属性：什么时候使用copy？？？
2.什么时候需要使用delegate/什么时候需要使用notification /// delegate/block/notification有什么不同点？？？
3.view声明周期的调用顺序：loadview->viewDidUnload /// 这些函数中需要执行什么操作？？？
4.iOS x.x的新特性
5.什么是kvc/什么是kvo ///kvc/kvo的工作原理
6.对象什么时候被release?
7.iphone OS有没有垃圾回收机制：没有。对比一下java的垃圾回收机制
8.controller中：didReceiveMemoryWaning是在什么时候调用，默认操作是什么？
9.深拷贝/浅拷贝的区别？
10.类别的作用？继承/类别在实现中有什么区别？
11.类别/类扩展的区别？
12.代理delegate/通知/block之间有什么区别？
13.iOS怎么做数据持久化？coredata/sqlite之间又什么联系？coredata是关系型数据库吗？
14.说说Objective-C管理内存有几种方法？
15.说说iOS中常用的多线程？最好能结合代码好好说；在哪里用到了多线程？三种多线程在哪里会比较全面一些，
然后谈一谈线程安全问题的解决方案？
16.block在ARC/MRC中用法有什么区别和联系？
17.常用的iOS设计模式有哪些？
18.简述苹果开发者的认证过程：申请账号/打包/上传/打回/提交/开服都要懂；
19.使用过哪些第三方库？jsonKit/AFNetworking/SnapKit/MJRefresh///要有针对性，涉及到每个方面；
20.怎么实现UITableView的懒加载？
21.iOS开发中常见的异常有哪些？
22.什么时候使用栈/队列？什么时候使用链表/数组？
23.什么是LRU算法？实现缓存/怎么操作？
24.UITableView的重用机制：描述/好处
25.简述objc的内存管理：这个真的是重点/需要好好理解组织语言
26.你理解的MVC是什么？你理解的MMVVM又是什么？
27.NSURLConnection/ASIHTTPRequest哪个更好？
28.写入一个插入排序：一般使用C语言/Java写
29.obj-c有私用方法吗？有私有变量吗？没有私用方法/有私有变量
30.什么是目标-动作机制？
31.readwrite/readonly的使用？
31.ViewController的loadView是在什么时候被调用的？
32.app之间怎么做跳转？一个app就是一个进程/所以进程/线程之间都是可以通信；
怎么在浏览器中返回App；
33.iOS有哪些性能分析工具？（这些基本没有接触过）
34.性能优化：重点
35.静态初始化什么场合可以使用？什么场合不能使用？
36.导致app异常假死的情况有哪些？有什么解决方案？
37.NSNotifacation(通知)是同步/异步？
38.怎么为App设计缓存？
39.比较两个版本号的大小？（比较字符串之间的大小）
40.obc中可修改/不可修改类型？
41.与property结合的时候怎么有效的避免内存泄漏？
42.Objective-C可以多重继承吗？不能/可以实现多个接口吗？能
重写类的方法用继承extend好还是分类category好？
43.线程/进程之间的区别和联系？
44.堆/栈的区别？
45.为什么内置类的Delegate要使用assign，而不使用retain? //防止循环引用
46.Objective-C语言有什么特点？swift语言有什么特点？
47.iOS中类有哪些通讯方式？
48.alloc/dealloc...retain/release之间的区别是什么？
49.简述Objective-C的内存管理机制：如何检测内存泄漏？


关于View的一些高级动画：目前是一点都不会


//笔试题
1.给定链表的头指针和一个结点指针，在O(1)时间删除该结点。
链表结点的定义如下：
struct ListNode {
    int m_nKey;
    ListNode* m_pNext;
}
函数的声明：void DeleteNode(ListNode* pListHead, ListNode* pToBeDeleted);
2.语句倒序：I am Bruch；（语言随意：不能使用伪代码）
3.手写“冒泡排序”/“堆排序”/“选择排序”/“插入排序”/“二分查找”
4.将一个链表逆序？/输出一个字符串是否对称？/输出树的深度？
5.定义一个标准宏MIN：输入两个参数并返回最小值？
6.C语言中默认的随机数random()是从x->y?
7.IBOutlet UIView *view;
@property (nonatomic,retain) UIView *view;
以上view对象需要release吗？
8.手写Objective-C的单例？
9.id obj = [[NSMutableArray alloc]init];/id obj = [NSMutableArray array];初始化
有什么不同？
10.在ARC模式下，autoreleasepool的使用？（使用伪代码）
11.id obj = [[[NSMutableArray alloc]init] autorelease];obj在什么时候释放？有什么
方法可以让obj马上释放？（用伪代码表示）
12.for(int index = 0; index < 20; index++) {
    NSString *tempStr = @"tempStr";
    NSLog(tempStr)
    NSNumber *tempNumber = [NSNumber numberWithInt:2];
    NSLog(tempNumber)
}
这段代码有什么问题？会不会导致内存泄漏(多线程)/在内存紧张的设备上做大循环时
简述自动释放池的工作原理？自动释放池是写在循环内好还是循环外好？为什么？
13.使用loadView/viewDidLoad/viewDidUnload分别在什么地方调用？做什么工作？
14.程序运行报错：请找出错误并改正
#include <stdio.h>
#include <malloc.h>

typedef struct {
	TNode* left;
	TNode* right;
	int value;
} TNode;

//面试题：技术部分
1.什么是操作系统？
Q.直接运行在硬件上的系统软件，其他任何软件都必须在操作系统上运行；
2.iOS程序在执行main函数之前做了哪些操作？
Q.
3.一个App可以有几个UIWindow？
Q.
4.view的生命周期分别是什么？
Q.
5.bounds和frame的区别？
Q.
6.-(void)loadView {}做了什么？
Q.
7.NSOperation什么时候从queue中移除？
Q.
8.ViewController生命周期？
Q.
9.NSInteger|CGFloat和int|double有什么区别？
Q.
10.atomic/nonatomic之间的区别？
Q.atomic表示原子操作：set/get方法不能被其他线程中断(线程安全)|缺省属性；
nonatomic表示非原子操作|atomic修饰的属性只表示set/get方法线程安全：不是真正的线程安全；
11.static的作用：
Q.static修饰的变量是静态变量，存储在数据段，在函数结束后变量不释放；
12.单例方法的原理：
 Q.首次调用单例方法时会创建对象，函数结束时指针和对象都不会消失；之后每次调用该方法都不会创建对象；
13.#include/#import的联系和区别：
Q.import的功能和include一样：将右边的文件copy到当前import的位置；
import优点：自动防止重复拷贝|include避免重复导入需要加“头文件卫士”；
14.printf和NSLog的区别：
Q.NSLog可以自动换行|NSLog会输出内容时会附加一些系统信息|接受的参数不一样；
15.#import ""和#import <>的区别：
Q.""-当前文件->开发工具->系统/<>-编译器环境->系统环境
16.MVC和MVVM的联系和区别：哈哈哈
17.iOS中常见的单例有哪些？弄懂每一个作用
Q.应用程序实例：UIApplication|消息中心：NSNotificationCenter|文件管理：NSFileManager|应用
程序设置：NSUserDefaults|请求缓存：NSURLCache|应用程序Cookies池：NSHTTPCookieStorage
18.怎么提高客户端的性能？（这点需要深入研究一番）
19.描述UIViewController的生命周期（深入细致描述）
20.列举熟悉cocoa touch框架？AVFoundation/...
21.自动释放池是什么？如果工作？
22.关键字const/volatile有什么含义？
23.普通屏幕/Retina屏幕适配有什么好方法？
24.IBOutlet/IBAction的作用？
25.有哪些方法可以启动一个线程？
26.xib/nib之间的区别？
27.@synthesize xxx是怎么实现的？
28.json解析内部是怎么实现的？
29.试说明SEL和@selector的用途？
30.iOS中App数据持久化机制有哪几种方案？（详细说明）
31.请说明Touch和非Touch事件发生时在系统中的传递过程？（事件传递hitest）
32.怎么获取磁盘空间（How to get disk space left）
33.对象在什么时候会被release？
34.如果开启异步线程？如果想要延迟执行某个线程怎么实现？
35.Oobjective-C语言：数据对象有哪些？与基本数据类型有什么区别？
36.什么是动态绑定？



//参考网站：
http://www.cnblogs.com/Piosa/archive/2012/02/22/2363234.html
//难点部分
1.Objective-C项目怎么设置可以全局设置头文件；

数据结构/数据库/操作系统/openGL/ES/计算机网络/软件工程(工作中重要)
编译原理：Xcode/OC/Swift/安卓

// iOS的设计模式
1.代理模式
应用场景：当一个类的某些功能需要由别的类来实现，但是又不确定具体会是哪个类实现。
优势：解耦合
敏捷原则：开放-封闭原则
实例：tableview的 数据源delegate，通过和protocol的配合，完成委托诉求。
列表row个数delegate
自定义的delegate

2.观察者模式
应用场景：一般为model层对，controller和view进行的通知方式，不关心谁去接收，只负责发布信息。
优势：解耦合
敏捷原则：接口隔离原则，开放-封闭原则
实例：Notification通知中心，注册通知中心，任何位置可以发送消息，注册观察者的对象可以接收。
kvo，键值对改变通知的观察者，平时基本没用过。

3.MVC模式
应用场景：是一中非常古老的设计模式，通过数据模型，控制器逻辑，视图展示将应用程序进行逻辑划分。
优势：使系统，层次清晰，职责分明，易于维护
敏捷原则：对扩展开放-对修改封闭
实例：model-即数据模型，view-视图展示，controller进行UI展现和数据交互的逻辑控制。

4.单例模式
应用场景：确保程序运行期某个类，只有一份实例，用于进行资源共享控制。
优势：使用简单，延时求值，易于跨模块
敏捷原则：单一职责原则
实例：[UIApplication sharedApplication]。
注意事项：确保使用者只能通过 getInstance方法才能获得，单例类的唯一实例。
java，C++中使其没有公有构造函数，私有化并覆盖其构造函数。
object c中，重写allocWithZone方法，保证即使用户用 alloc方法直接创建单例类的实例，
返回的也只是此单例类的唯一静态变量。


5.策略模式
应用场景：定义算法族，封装起来，使他们之间可以相互替换。
优势：使算法的变化独立于使用算法的用户
敏捷原则：接口隔离原则；多用组合，少用继承；针对接口编程，而非实现。
实例：排序算法，NSArray的sortedArrayUsingSelector；经典的鸭子会叫，会飞案例。
注意事项：1，剥离类中易于变化的行为，通过组合的方式嵌入抽象基类
2，变化的行为抽象基类为，所有可变变化的父类
3，用户类的最终实例，通过注入行为实例的方式，设定易变行为
防止了继承行为方式，导致无关行为污染子类。完成了策略封装和可替换性。

6.工厂模式
应用场景：工厂方式创建类的实例，多与proxy模式配合，创建可替换代理类。
优势：易于替换，面向抽象编程，application只与抽象工厂和易变类的共性抽象类发生调用关系。
敏捷原则：DIP依赖倒置原则
实例：项目部署环境中依赖多个不同类型的数据库时，需要使用工厂配合proxy完成易用性替换
注意事项：项目初期，软件结构和需求都没有稳定下来时，不建议使用此模式，因为其劣势也很明显，
增 加了代码的复杂度，增加了调用层次，增加了内存负担。所以要注意防止模式的滥用。

MVC是一个框架模式 Model View Controller  模型--视图--控制器  各自处理自己的任务
    M是指数据模型  V是指用户界面  C是指控制器 使用MVC的目的是将M和V的实现代码分离 C存在的目的则是确保M和V的同步
    耦合性低   重用性高  生命周期成本低

最典型的MVC就是JSP + servlet + javabean的模式

//面试题：非技术部分
1.你昨天/本周学习了什么知识？
Q.
2.你为什么热衷软件开发？为什么入行？
Q.
3.5年规划？今年的目标分别是什么？
4.希望从公司学习到什么？
5.工作中遇到什么技术难点（这个一般不是人事问题、但是需要好好总结）
6.你为什么要离职？（这个问题问的还是很多的）
7.上一家公司的工资多少？照实说16k/下一家20k
8.在公司中iOS中有多少人？上家公司的工作流程？自己负责的是什么？（需要好好总结）
9.你拿到几家的offer？（一般建议说1～3家）

CGFloat/Float之间的区别？
NSInteger/int之间的区别？

总结一下UITableView的重用机制？//重点说明

总结一下iOS的内存管理：
1.release/autorelease分别在什么情况下使用？
2.block的内存管理需要注意什么？
3.对象在什么时候会被release？

总结提高客户端性能的方法？
//UI方法：
//网络方法：
//方法规范方法：

赶集网的面试：1.传值 2.推送 3.数据存储 4.代理/单例
第一轮：推送机制->多线程->开发流程
第二轮：支付

重点：手动内存管理/自动内存管理的原理&步骤&应用

1.读写文件的例子？
2.读写数据库的例子？
3.异步加载网络图片的例子？

总结苹果开发者相关：
1.开发者账号生成的测试证书有效期：1年
关于苹果上架流程：企业证书/个人证书/testflight等

总结推送：
1.从APNS获取device token作为设备唯一标识符

UIImage读取图片：怎么可以避免内存

数据结构；树

怎么让App在后台可以保持活跃

一般来讲...一个项目你需要从哪里开始做起：这点很重要...
你需要先写什么、在写什么、
一般来讲：业务相关的可以后来扩充
底层的必须要先写好

//RunTime  运行时：NSString  编译时：NSData
NSData *data = [NSString stringWithFormat:@"%d", 12];

UITableView调用reloadData()会发生什么问题？

- 面试的时候不建议过多评价还有透漏上家公司信息；仅仅限于人事/使用ceo

### 面试题
1. 定义属性的时候，什么情况下使用copy、assign和retain？
2. 对象在什么时候会被release？
3. iphoneOS有没有垃圾回收？
4. 同一个游戏包(GameID相同)怎么区分下载来自哪一个渠道？
5. UITableView怎么做预加载？
6. 懂不懂OpenGL？
7. 知道多线程吗？介绍一下iOS中多线程的情况？平时你喜欢使用哪种？在哪些开发中使用到了多线程？
8. swift中结构体和类之间的区别？
9. 谈谈内存管理：ARC、MRC
10. 什么是堆，什么是栈区
11. keyWindow和一般Window的区别？
12. delegate/通知/block之间的区别？
13. AF2.0和AF3.0之间的区别？AF2.0有常驻子线程而AF3.0没有是什么原因？
14. git rebase/git merge的区别？
15. Int/NSInteger的区别？<br>
int是短整型、NSInteger也是基本数据类型:CGFloat一样、但是NSInteger会根据操作系统(32/64)的位数判断，最大数值是int/long|NSNumber是类。
16. 数组指针/指针数组的区别？
17. 三种动画？各种动画的区别联系？
18. block的循环引用：渐变动画会出现循环引用吗？
19. atomic一定是安全的吗？

开发中做的事情：软件编码/单元测试/技术难点
面向对象的编程思想

///iOS职位要求
### 必须项：
1.丰富的客户端App架构经验、可以独立承担架构设计、主导项目；
2.熟悉iOS的调试工具和方法、crash追踪；
3.精通Objective-C语言/swift语言；
4.精通UI、动画、网络编程(Socket、https/web)、数据库、多线程、
h5/js交互；
5.熟悉常用软件架构模式、算法与数据结构；
6.熟悉CocoaPods、git、svn等工具；
7.至少参加两款商业应用开发并上架AppStore；
8.学习能力强、工作积极主动、有强烈责任心和严谨作风、协作沟通能力、解决问题能力；
### 加分项：
1.提供github账号或者技术博客账号(为开源项目做过贡献)；
2.深入了解iOS动画机制、音频、视频开发经验；
3.熟悉C/C++语言、前端、后端、RN、Weex、H5混合开发；
4.内存泄漏、App性能调优经验优先；
5.了解常用的设计模式，有架构和组件化经验；
6.扎实的计算机基础，了解数据结构和常见算法；
7.深入研究AR相关技术的优先；
8.良好的产品和业务sense；
9.有App Store上架作品优先；